/* –ó–∞–≤–¥–∞–Ω–Ω—è 1 */
/* "–ö–∞–º—ñ–Ω—å, –Ω–æ–∂–∏—Ü—ñ, –ø–∞–ø—ñ—Ä" */

/*
–û–ø–∏—Å –≥—Ä–∏:
–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≥—Ä–∞—î –ø—Ä–æ—Ç–∏ –∫–æ–º–ø'—é—Ç–µ—Ä–∞ –≤ –∫–ª–∞—Å–∏—á–Ω—É –≥—Ä—É "–ö–∞–º—ñ–Ω—å, –Ω–æ–∂–∏—Ü—ñ, –ø–∞–ø—ñ—Ä". –ü—Ä–æ–≥—Ä–∞–º–∞ –∑–∞–ø–∏—Ç—É—î –≤–∏–±—ñ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –≥–µ–Ω–µ—Ä—É—î –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –≤–∏–±—ñ—Ä –¥–ª—è –∫–æ–º–ø'—é—Ç–µ—Ä–∞, –≤–∏–∑–Ω–∞—á–∞—î –ø–µ—Ä–µ–º–æ–∂—Ü—è —Ç–∞ –≤–∏–≤–æ–¥–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç.

–ö—Ä–æ–∫–∏ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è:

1. –í–≤–µ–¥–µ–Ω–Ω—è –≤–∏–±–æ—Ä—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:
   - –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ `prompt` –¥–ª—è –∑–∞–ø–∏—Ç—É –≤–∏–±–æ—Ä—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–∫–∞–º—ñ–Ω—å, –Ω–æ–∂–∏—Ü—ñ, –ø–∞–ø—ñ—Ä).

2. –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤–∏–±–æ—Ä—É –∫–æ–º–ø'—é—Ç–µ—Ä–∞:
   - –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ `Math.random()` –¥–ª—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –≤–∏–±–æ—Ä—É –º—ñ–∂ –∫–∞–º–µ–Ω–µ–º, –Ω–æ–∂–∏—Ü—è–º–∏ —ñ –ø–∞–ø–µ—Ä–æ–º.

3. –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–µ—Ä–µ–º–æ–∂—Ü—è:
   - –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ —É–º–æ–≤–Ω—ñ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–µ—Ä–µ–º–æ–∂—Ü—è –∑–∞ –ø—Ä–∞–≤–∏–ª–∞–º–∏ –≥—Ä–∏:
     - –ö–∞–º—ñ–Ω—å –±'—î –Ω–æ–∂–∏—Ü—ñ.
     - –ù–æ–∂–∏—Ü—ñ –±'—é—Ç—å –ø–∞–ø—ñ—Ä.
     - –ü–∞–ø—ñ—Ä –±'—î –∫–∞–º—ñ–Ω—å.
     - –û–¥–Ω–∞–∫–æ–≤—ñ –≤–∏–±–æ—Ä–∏ - –Ω—ñ—á–∏—è.

4. –í–∏–≤–µ–¥–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É:
   - –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ `alert` –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è –≤–∏–±–æ—Ä—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –≤–∏–±–æ—Ä—É –∫–æ–º–ø'—é—Ç–µ—Ä–∞ —Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –≥—Ä–∏.

–î–æ–¥–∞—Ç–∫–æ–≤—ñ –∑–∞–≤–¥–∞–Ω–Ω—è:
1. –î–æ–¥–∞—Ç–∏ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –≥—Ä–∏ –∫—ñ–ª—å–∫–∞ —Ä–∞—É–Ω–¥—ñ–≤ –∑ –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫–æ–º –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Ö—É–Ω–∫—É.
2. –î–æ–¥–∞—Ç–∏ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ –≤–∏–π—Ç–∏ –∑ –≥—Ä–∏ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—ó –∫–æ–º–∞–Ω–¥–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –≤–≤–µ–¥–µ–Ω–Ω—è "–≤–∏—Ö—ñ–¥")
 */

const items = ['–∫–∞–º—ñ–Ω—å', '–Ω–æ–∂–∏—Ü—ñ', '–ø–∞–ø—ñ—Ä'];
let userScore = 0;
let computerScore = 0;
let rounds = 0;

function getValidValue(message) {
  const validItems = ['–∫–∞–º—ñ–Ω—å', '–Ω–æ–∂–∏—Ü—ñ', '–ø–∞–ø—ñ—Ä', '–≤–∏—Ö—ñ–¥'];

  while (true) {
    let value = prompt(message);
    if (value === null) return null;
    let lowerCaseValue = value.toLowerCase();
    if (validItems.includes(lowerCaseValue)) return lowerCaseValue;
    alert('–ü–æ–º–∏–ª–∫–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å: –∫–∞–º—ñ–Ω—å, –Ω–æ–∂–∏—Ü—ñ, –ø–∞–ø—ñ—Ä –∞–±–æ –≤–∏—Ö—ñ–¥');
  }
}

while (true) {
  let valueUser = getValidValue(
    '–í–≤–µ–¥—ñ—Ç—å: –∫–∞–º—ñ–Ω—å, –Ω–æ–∂–∏—Ü—ñ, –ø–∞–ø—ñ—Ä –∞–±–æ –≤–∏—Ö—ñ–¥ - –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≥—Ä–∏'
  );

  if (valueUser === null) {
    alert('–ì—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î—è–∫—É—î–º–æ –∑–∞ –≥—Ä—É!');
    break;
  }

  if (valueUser === '–≤–∏—Ö—ñ–¥') {
    let finalWinner;

    if (userScore > computerScore) {
      finalWinner = '–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á';
    } else if (userScore < computerScore) {
      finalWinner = "–∫–æ–º–ø'—é—Ç–µ—Ä";
    } else {
      finalWinner = '–Ω—ñ—á–∏—è';
    }

    let finalMessage = `–ì—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
  –ó–∞–≥–∞–ª—å–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á ${userScore} - –∫–æ–º–ø'—é—Ç–µ—Ä ${computerScore}
  –†–∞—É–Ω–¥—ñ–≤: ${rounds}
  –ü–µ—Ä–µ–º–æ–∂–µ—Ü—å: ${finalWinner}`;

    let finalMessageWithEmoji =
      finalWinner === '–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á'
        ? finalMessage + ' –í—ñ—Ç–∞—î–º–æ üòä'
        : finalMessage;

    alert(finalMessageWithEmoji);
    break;
  }

  let valueComp = items[Math.floor(Math.random() * items.length)];
  let result = '';

  if (valueUser === valueComp) {
    result = '–Ω—ñ—á–∏—è';
  } else if (valueUser === '–∫–∞–º—ñ–Ω—å' && valueComp === '–Ω–æ–∂–∏—Ü—ñ') {
    userScore++;
    result = '–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á';
  } else if (valueUser === '–Ω–æ–∂–∏—Ü—ñ' && valueComp === '–ø–∞–ø—ñ—Ä') {
    userScore++;
    result = '–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á';
  } else if (valueUser === '–ø–∞–ø—ñ—Ä' && valueComp === '–∫–∞–º—ñ–Ω—å') {
    userScore++;
    result = '–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á';
  } else {
    computerScore++;
    result = "–∫–æ–º–ø'—é—Ç–µ—Ä";
  }

  rounds++;

  alert(
    `–í–∏–±—ñ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ${valueUser}
–í–∏–±—ñ—Ä –∫–æ–º–ø'—é—Ç–µ—Ä–∞: ${valueComp}
–ü–µ—Ä–µ–º–æ–∂–µ—Ü—å: ${result}
–†–∞—É–Ω–¥—ñ–≤: ${rounds}`
  );
}

/* –ó–∞–≤–¥–∞–Ω–Ω—è 2 */
/* A math quiz */

let correctAnswers = 0;
let wrongAnswers = 0;
const attempts = 5;

for (let i = 0; i < attempts; i++) {
  let numberOne = Math.floor(Math.random() * 10) + 1;
  let numberTwo = Math.floor(Math.random() * 10) + 1;
  let operators = ['+', '-', '*', '/'];
  let operator = operators[Math.floor(Math.random() * operators.length)];
  let expression = `${numberOne} ? ${numberTwo}`;
  let expressionDisplay =
    operator === '+' || operator === '-'
      ? `${numberOne} ${operator} ${numberTwo}`
      : expression;
  let userAnswer = parseFloat(
    prompt(
      `–†–æ–∑–≤'—è–∂—ñ—Ç—å: ${expressionDisplay}
    ? = * –∞–±–æ /
    –ü—Ä–∏ –¥—ñ–ª–µ–Ω–Ω—ñ –≤—Ä–∞—Ö–æ–≤—É—é—Ç—å—Å—è 2 –∑–Ω–∞–∫–∏ –ø—ñ—Å–ª—è –∫—Ä–∞–ø–∫–∏`
    )
  );

  let correctAnswer;

  switch (operator) {
    case '+':
      correctAnswer = numberOne + numberTwo;
      break;
    case '-':
      correctAnswer = numberOne - numberTwo;
      break;
    case '*':
      correctAnswer = numberOne * numberTwo;
      break;
    case '/':
      correctAnswer = parseFloat((numberOne / numberTwo).toFixed(2));
      break;
  }

  if (userAnswer === correctAnswer) {
    correctAnswers++;
    alert('–ü—Ä–∞–≤–∏–ª—å–Ω–æ!');
  } else {
    wrongAnswers++;
    alert(`–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: ${correctAnswer}`);
  }
}

alert(
  `–ì—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π: ${correctAnswers}, –∫—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π: ${wrongAnswers}`
);
